#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Курсовая_работа
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class DatabaseMain : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertChildren(Children instance);
    partial void UpdateChildren(Children instance);
    partial void DeleteChildren(Children instance);
    partial void InsertGroups(Groups instance);
    partial void UpdateGroups(Groups instance);
    partial void DeleteGroups(Groups instance);
    partial void InsertParents(Parents instance);
    partial void UpdateParents(Parents instance);
    partial void DeleteParents(Parents instance);
    partial void InsertSchedule(Schedule instance);
    partial void UpdateSchedule(Schedule instance);
    partial void DeleteSchedule(Schedule instance);
    partial void InsertTeachers(Teachers instance);
    partial void UpdateTeachers(Teachers instance);
    partial void DeleteTeachers(Teachers instance);
    #endregion
		
		public DatabaseMain(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseMain(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseMain(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseMain(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Children> Children
		{
			get
			{
				return this.GetTable<Children>();
			}
		}
		
		public System.Data.Linq.Table<Groups> Groups
		{
			get
			{
				return this.GetTable<Groups>();
			}
		}
		
		public System.Data.Linq.Table<Parents> Parents
		{
			get
			{
				return this.GetTable<Parents>();
			}
		}
		
		public System.Data.Linq.Table<Schedule> Schedule
		{
			get
			{
				return this.GetTable<Schedule>();
			}
		}
		
		public System.Data.Linq.Table<Teachers> Teachers
		{
			get
			{
				return this.GetTable<Teachers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Children : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _HomeAddress;
		
		private System.DateTime _DateOfBirth;
		
		private string _ChildsPhoneNumber;
		
		private string _FioChildren;
		
		private int _GroupId;
		
		private EntitySet<Parents> _Parents;
		
		private EntityRef<Groups> _Groups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnHomeAddressChanging(string value);
    partial void OnHomeAddressChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnChildsPhoneNumberChanging(string value);
    partial void OnChildsPhoneNumberChanged();
    partial void OnFioChildrenChanging(string value);
    partial void OnFioChildrenChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
		
		public Children()
		{
			this._Parents = new EntitySet<Parents>(new Action<Parents>(this.attach_Parents), new Action<Parents>(this.detach_Parents));
			this._Groups = default(EntityRef<Groups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeAddress", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string HomeAddress
		{
			get
			{
				return this._HomeAddress;
			}
			set
			{
				if ((this._HomeAddress != value))
				{
					this.OnHomeAddressChanging(value);
					this.SendPropertyChanging();
					this._HomeAddress = value;
					this.SendPropertyChanged("HomeAddress");
					this.OnHomeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildsPhoneNumber", DbType="NVarChar(21) NOT NULL", CanBeNull=false)]
		public string ChildsPhoneNumber
		{
			get
			{
				return this._ChildsPhoneNumber;
			}
			set
			{
				if ((this._ChildsPhoneNumber != value))
				{
					this.OnChildsPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ChildsPhoneNumber = value;
					this.SendPropertyChanged("ChildsPhoneNumber");
					this.OnChildsPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FioChildren", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string FioChildren
		{
			get
			{
				return this._FioChildren;
			}
			set
			{
				if ((this._FioChildren != value))
				{
					this.OnFioChildrenChanging(value);
					this.SendPropertyChanging();
					this._FioChildren = value;
					this.SendPropertyChanged("FioChildren");
					this.OnFioChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Children_Parents", Storage="_Parents", ThisKey="ID", OtherKey="ChildrenId")]
		public EntitySet<Parents> Parents
		{
			get
			{
				return this._Parents;
			}
			set
			{
				this._Parents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Children", Storage="_Groups", ThisKey="GroupId", OtherKey="ID", IsForeignKey=true)]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.Children.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.Children.Add(this);
						this._GroupId = value.ID;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Parents(Parents entity)
		{
			this.SendPropertyChanging();
			entity.Children = this;
		}
		
		private void detach_Parents(Parents entity)
		{
			this.SendPropertyChanging();
			entity.Children = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _TypeOfActivity;
		
		private int _MaxNumberOfChildren;
		
		private int _MinAgeInTheGroup;
		
		private int _MaxAgeInTheGroup;
		
		private decimal _CostOfaMonthOfTraining;
		
		private EntitySet<Children> _Children;
		
		private EntitySet<Schedule> _Schedule;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTypeOfActivityChanging(string value);
    partial void OnTypeOfActivityChanged();
    partial void OnMaxNumberOfChildrenChanging(int value);
    partial void OnMaxNumberOfChildrenChanged();
    partial void OnMinAgeInTheGroupChanging(int value);
    partial void OnMinAgeInTheGroupChanged();
    partial void OnMaxAgeInTheGroupChanging(int value);
    partial void OnMaxAgeInTheGroupChanged();
    partial void OnCostOfaMonthOfTrainingChanging(decimal value);
    partial void OnCostOfaMonthOfTrainingChanged();
    #endregion
		
		public Groups()
		{
			this._Children = new EntitySet<Children>(new Action<Children>(this.attach_Children), new Action<Children>(this.detach_Children));
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfActivity", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string TypeOfActivity
		{
			get
			{
				return this._TypeOfActivity;
			}
			set
			{
				if ((this._TypeOfActivity != value))
				{
					this.OnTypeOfActivityChanging(value);
					this.SendPropertyChanging();
					this._TypeOfActivity = value;
					this.SendPropertyChanged("TypeOfActivity");
					this.OnTypeOfActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxNumberOfChildren", DbType="Int NOT NULL")]
		public int MaxNumberOfChildren
		{
			get
			{
				return this._MaxNumberOfChildren;
			}
			set
			{
				if ((this._MaxNumberOfChildren != value))
				{
					this.OnMaxNumberOfChildrenChanging(value);
					this.SendPropertyChanging();
					this._MaxNumberOfChildren = value;
					this.SendPropertyChanged("MaxNumberOfChildren");
					this.OnMaxNumberOfChildrenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinAgeInTheGroup", DbType="Int NOT NULL")]
		public int MinAgeInTheGroup
		{
			get
			{
				return this._MinAgeInTheGroup;
			}
			set
			{
				if ((this._MinAgeInTheGroup != value))
				{
					this.OnMinAgeInTheGroupChanging(value);
					this.SendPropertyChanging();
					this._MinAgeInTheGroup = value;
					this.SendPropertyChanged("MinAgeInTheGroup");
					this.OnMinAgeInTheGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxAgeInTheGroup", DbType="Int NOT NULL")]
		public int MaxAgeInTheGroup
		{
			get
			{
				return this._MaxAgeInTheGroup;
			}
			set
			{
				if ((this._MaxAgeInTheGroup != value))
				{
					this.OnMaxAgeInTheGroupChanging(value);
					this.SendPropertyChanging();
					this._MaxAgeInTheGroup = value;
					this.SendPropertyChanged("MaxAgeInTheGroup");
					this.OnMaxAgeInTheGroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostOfaMonthOfTraining", DbType="Money NOT NULL")]
		public decimal CostOfaMonthOfTraining
		{
			get
			{
				return this._CostOfaMonthOfTraining;
			}
			set
			{
				if ((this._CostOfaMonthOfTraining != value))
				{
					this.OnCostOfaMonthOfTrainingChanging(value);
					this.SendPropertyChanging();
					this._CostOfaMonthOfTraining = value;
					this.SendPropertyChanged("CostOfaMonthOfTraining");
					this.OnCostOfaMonthOfTrainingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Children", Storage="_Children", ThisKey="ID", OtherKey="GroupId")]
		public EntitySet<Children> Children
		{
			get
			{
				return this._Children;
			}
			set
			{
				this._Children.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Schedule", Storage="_Schedule", ThisKey="ID", OtherKey="GroupId")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Children(Children entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_Children(Children entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Parents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FioParents;
		
		private string _ParentsPhoneNumber;
		
		private int _ChildrenId;
		
		private EntityRef<Children> _Children;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFioParentsChanging(string value);
    partial void OnFioParentsChanged();
    partial void OnParentsPhoneNumberChanging(string value);
    partial void OnParentsPhoneNumberChanged();
    partial void OnChildrenIdChanging(int value);
    partial void OnChildrenIdChanged();
    #endregion
		
		public Parents()
		{
			this._Children = default(EntityRef<Children>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FioParents", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string FioParents
		{
			get
			{
				return this._FioParents;
			}
			set
			{
				if ((this._FioParents != value))
				{
					this.OnFioParentsChanging(value);
					this.SendPropertyChanging();
					this._FioParents = value;
					this.SendPropertyChanged("FioParents");
					this.OnFioParentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentsPhoneNumber", DbType="NVarChar(21) NOT NULL", CanBeNull=false)]
		public string ParentsPhoneNumber
		{
			get
			{
				return this._ParentsPhoneNumber;
			}
			set
			{
				if ((this._ParentsPhoneNumber != value))
				{
					this.OnParentsPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._ParentsPhoneNumber = value;
					this.SendPropertyChanged("ParentsPhoneNumber");
					this.OnParentsPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ChildrenId", DbType="Int NOT NULL")]
		public int ChildrenId
		{
			get
			{
				return this._ChildrenId;
			}
			set
			{
				if ((this._ChildrenId != value))
				{
					if (this._Children.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnChildrenIdChanging(value);
					this.SendPropertyChanging();
					this._ChildrenId = value;
					this.SendPropertyChanged("ChildrenId");
					this.OnChildrenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Children_Parents", Storage="_Children", ThisKey="ChildrenId", OtherKey="ID", IsForeignKey=true)]
		public Children Children
		{
			get
			{
				return this._Children.Entity;
			}
			set
			{
				Children previousValue = this._Children.Entity;
				if (((previousValue != value) 
							|| (this._Children.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Children.Entity = null;
						previousValue.Parents.Remove(this);
					}
					this._Children.Entity = value;
					if ((value != null))
					{
						value.Parents.Add(this);
						this._ChildrenId = value.ID;
					}
					else
					{
						this._ChildrenId = default(int);
					}
					this.SendPropertyChanged("Children");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Schedule : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.DateTime _ClassDateTime;
		
		private int _Duration_minutes;
		
		private int _TeacherId;
		
		private int _GroupId;
		
		private EntityRef<Groups> _Groups;
		
		private EntityRef<Teachers> _Teachers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClassDateTimeChanging(System.DateTime value);
    partial void OnClassDateTimeChanged();
    partial void OnDuration_minutesChanging(int value);
    partial void OnDuration_minutesChanged();
    partial void OnTeacherIdChanging(int value);
    partial void OnTeacherIdChanged();
    partial void OnGroupIdChanging(int value);
    partial void OnGroupIdChanged();
    #endregion
		
		public Schedule()
		{
			this._Groups = default(EntityRef<Groups>);
			this._Teachers = default(EntityRef<Teachers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassDateTime", DbType="DateTime NOT NULL")]
		public System.DateTime ClassDateTime
		{
			get
			{
				return this._ClassDateTime;
			}
			set
			{
				if ((this._ClassDateTime != value))
				{
					this.OnClassDateTimeChanging(value);
					this.SendPropertyChanging();
					this._ClassDateTime = value;
					this.SendPropertyChanged("ClassDateTime");
					this.OnClassDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration_minutes", DbType="Int NOT NULL")]
		public int Duration_minutes
		{
			get
			{
				return this._Duration_minutes;
			}
			set
			{
				if ((this._Duration_minutes != value))
				{
					this.OnDuration_minutesChanging(value);
					this.SendPropertyChanging();
					this._Duration_minutes = value;
					this.SendPropertyChanged("Duration_minutes");
					this.OnDuration_minutesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherId", DbType="Int NOT NULL")]
		public int TeacherId
		{
			get
			{
				return this._TeacherId;
			}
			set
			{
				if ((this._TeacherId != value))
				{
					if (this._Teachers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTeacherIdChanging(value);
					this.SendPropertyChanging();
					this._TeacherId = value;
					this.SendPropertyChanged("TeacherId");
					this.OnTeacherIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupId", DbType="Int NOT NULL")]
		public int GroupId
		{
			get
			{
				return this._GroupId;
			}
			set
			{
				if ((this._GroupId != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupIdChanging(value);
					this.SendPropertyChanging();
					this._GroupId = value;
					this.SendPropertyChanged("GroupId");
					this.OnGroupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Schedule", Storage="_Groups", ThisKey="GroupId", OtherKey="ID", IsForeignKey=true)]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._GroupId = value.ID;
					}
					else
					{
						this._GroupId = default(int);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_Schedule", Storage="_Teachers", ThisKey="TeacherId", OtherKey="ID", IsForeignKey=true)]
		public Teachers Teachers
		{
			get
			{
				return this._Teachers.Entity;
			}
			set
			{
				Teachers previousValue = this._Teachers.Entity;
				if (((previousValue != value) 
							|| (this._Teachers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teachers.Entity = null;
						previousValue.Schedule.Remove(this);
					}
					this._Teachers.Entity = value;
					if ((value != null))
					{
						value.Schedule.Add(this);
						this._TeacherId = value.ID;
					}
					else
					{
						this._TeacherId = default(int);
					}
					this.SendPropertyChanged("Teachers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute()]
	public partial class Teachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Fio;
		
		private System.DateTime _DateOfBirth;
		
		private string _Specialization;
		
		private int _WorkExperience;
		
		private decimal _Salary;
		
		private EntitySet<Schedule> _Schedule;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFioChanging(string value);
    partial void OnFioChanged();
    partial void OnDateOfBirthChanging(System.DateTime value);
    partial void OnDateOfBirthChanged();
    partial void OnSpecializationChanging(string value);
    partial void OnSpecializationChanged();
    partial void OnWorkExperienceChanging(int value);
    partial void OnWorkExperienceChanged();
    partial void OnSalaryChanging(decimal value);
    partial void OnSalaryChanged();
    #endregion
		
		public Teachers()
		{
			this._Schedule = new EntitySet<Schedule>(new Action<Schedule>(this.attach_Schedule), new Action<Schedule>(this.detach_Schedule));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Fio", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Fio
		{
			get
			{
				return this._Fio;
			}
			set
			{
				if ((this._Fio != value))
				{
					this.OnFioChanging(value);
					this.SendPropertyChanging();
					this._Fio = value;
					this.SendPropertyChanged("Fio");
					this.OnFioChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime NOT NULL")]
		public System.DateTime DateOfBirth
		{
			get
			{
				return this._DateOfBirth;
			}
			set
			{
				if ((this._DateOfBirth != value))
				{
					this.OnDateOfBirthChanging(value);
					this.SendPropertyChanging();
					this._DateOfBirth = value;
					this.SendPropertyChanged("DateOfBirth");
					this.OnDateOfBirthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialization", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string Specialization
		{
			get
			{
				return this._Specialization;
			}
			set
			{
				if ((this._Specialization != value))
				{
					this.OnSpecializationChanging(value);
					this.SendPropertyChanging();
					this._Specialization = value;
					this.SendPropertyChanged("Specialization");
					this.OnSpecializationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkExperience", DbType="Int NOT NULL")]
		public int WorkExperience
		{
			get
			{
				return this._WorkExperience;
			}
			set
			{
				if ((this._WorkExperience != value))
				{
					this.OnWorkExperienceChanging(value);
					this.SendPropertyChanging();
					this._WorkExperience = value;
					this.SendPropertyChanged("WorkExperience");
					this.OnWorkExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Salary", DbType="Money NOT NULL")]
		public decimal Salary
		{
			get
			{
				return this._Salary;
			}
			set
			{
				if ((this._Salary != value))
				{
					this.OnSalaryChanging(value);
					this.SendPropertyChanging();
					this._Salary = value;
					this.SendPropertyChanged("Salary");
					this.OnSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_Schedule", Storage="_Schedule", ThisKey="ID", OtherKey="TeacherId")]
		public EntitySet<Schedule> Schedule
		{
			get
			{
				return this._Schedule;
			}
			set
			{
				this._Schedule.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = this;
		}
		
		private void detach_Schedule(Schedule entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = null;
		}
	}
}
#pragma warning restore 1591
